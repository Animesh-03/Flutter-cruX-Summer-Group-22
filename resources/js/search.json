[[{"l":"Flutter cruX Summer Group 22","p":["Welcome to the Flutter Summer Group by cruX!","I am Animesh; Akshat and I will be your Flutter Mentors for the duration of the summer group.","Throughout this summer group you will be building a fully functional news app using newsapi, an OTP based authentication using firebase and a bookmark system using firestore.","I will be posting material which consist of tutorials and videos on the web by well known Youtubers for flutter dev and some hand-typed explanation from me on specific topics every week.","I hope you will learn something new and useful this summer and have a good addition to your projects on GitHub."]}],[{"l":"Installation And Introduction"},{"i":"what-is-flutter","l":"What is Flutter?","p":["Flutter is a multiplatform framework from Google used for building apps for web, mobile and desktop.","What do I mean by multiplatform? It means one can build apps for a device regardless of the platform it is running on like Android, iOS, Windows, Linux etc.","You might be aware of the shortage of apps for iOS for campus related task. This is because all those apps were built using native frameworks.","Native apps are those which are built for a specific platform and this means a developer needs to write code separately for each of those platforms though they are meant to serve the same purpose. This is very disappointing for developers that code apps that require multiple platforms.","Flutter however solves this issue as it only requires a developer to code once yet it can build to many different platforms like Android, iOS and Windows. This also ensures uniformity across the various platforms the app is deployed to.","Another advantage of Flutter over the standard frameworks which use HTML and CSS is that Flutter only uses \"Dart\" for everything it does. Dart is very similar to other languages like Java and shares most of the syntax you use in C/C++ with some additional functions.","You can watch these for a bit more info on Flutter and Dart:","Flutter in 100 seconds","Dart in 100 seconds"]},{"l":"Installation","p":["To get started with Flutter head on to https://docs.flutter.dev/get-started/install and follow the steps for your OS.","Make sure to follow every step sequentially and pay attention to the warnings to avoid errors.","Skip the \"Set up Android Emulator\" part for now as we will look at it later. However, follow the next steps in the web page.","Run flutter doctor in a command prompt or a shell after installation to ensure that flutter is working as intended.","We will be using VSCode throughout the summer group instead of Android Studio as VSCode is a million times faster and also will work on relatively potato PCs. However, this does not mean that installation of Android Studio is optional as Flutter needs it to be installed in your system.","To start using flutter in VSCode install the following extensions:","Flutter Extension","Awesome Flutter Snippets","Awesome flutter snippets provide certain snippets which makes life easier. We will be mainly using it for building stateless and stateful Widgets in the course so search the shortcuts for them in its documentation."]},{"l":"Dart","p":["There's just one more step before we actually get to building your first flutter project which is to understand the Dart language. You don't necessarily need to know every minute detail of dart or any new language for that matter to get started. You only need enough to roughly understand the objective of code that you see.","A good starting point for learning dart: https://codelabs.developers.google.com/codelabs/from-java-to-dart/","You can however complete additional codelabs if you want to, however it is not really necessary. https://dart.dev/codelabs"]},{"l":"Building A Flutter App","p":["The exciting part is finally here! Let's build our first app.","Open up a terminal in VSCode and run the following command: flutter create newsapp You can change the name of the app to anything else you like but make sure to not have any capital letters in the name.","As you can tell, the above command will create the necessary files for a flutter project. And yes, it does take a while to run the command.","This command will already create a basic app created for you all packed into a single dart file in lib/main.dart .","You can run the app by either using an emulator or plugging in your phone to your PC using your USB charging cable. Note that using an emulator will consume a significant amount of PC resources and is only recommended for systems with 16GB RAM. The Potato PCs can run their app using the USB cable.","To use emulator: https://docs.flutter.dev/get-started/install/windows#set-up-the-android-emulator","To run on physical device: https://medium.com/@ferilukmansyah/easy-way-to-setup-your-android-device-to-run-flutter-project-28bddf0fa7f1"]},{"l":"Next Steps","p":["We will be starting the Flutter track with Week 1 in July. In the meanwhile, enthusiastic folks can try and decipher the code in lib/main.dart of the project you just created. Do not get discouraged even if you understood absolutely nothing! Learning a new framework is a daunting task by itself and pair it up with a new language and congratulations, you just entered hell for a week or two (Yes, it doesn't take too long to get comfortable with Flutter). I will begin Week 1 by explaining the code in main.dart before anything else. Stay Tuned!"]}],[{"l":"Week 1","p":["In this week we will learn about Layout widgets and constraints."]},{"l":"Assignment","p":["The assignment will be a layout replication challenge."]}],[{"l":"Week1","p":["Welcome to Week 1 of the Flutter Summer Group by cruX! Before we jump into the code of the example counter app created by the flutter create command, let's look at what state is and the difference between stateless and stateful widgets."]},{"l":"State","p":["In generic terms, state of an app or more specifically of a widget in flutter determines what is to be rendered on to the screen. In other words, the UI is a function of state.","UI as a Function of State","To understand state better, let's look at stateless and stateful widgets."]},{"l":"Stateless and Stateful Widgets"},{"l":"Widgets","p":["A widget is a dart class which contains the info on how and what to render onto the screen.","This might be a good time to review or learn Object-Oriented Programming if you don't know already. You can look at the Python track which will introduce OOPS concept.","Everything in flutter is based on widgets. A widget performs a specific task that is described by the build method in the widget.","A widget is similar to a react component and the build method is similar to the render() function(for a class component) or a return() statement (for a functional component) for those familiar with ReactJS.","Every widget is further divided into stateless and stateful widgets and as the name suggests stateless widgets are something that do not concern themselves with state. In other words the UI is a constant function and cannot be changed once rendered.","A stateful widget on the other hand is something that can change given the state of the widget changes. The \"state\" in a stateful widget is simply a set of variables i.e, they can be an int, a string, a bool etc.","For example let's consider a button that can toggle a variable called bool isVisible which in turn toggles something like a text on the screen. When a user presses the button, the app needs to change its state which in this case is isVisible. In flutter, to change the state you need to call the setState() function which notifies that the state has changed and hence the widget needs to rendered again. If you however change the value of the variable without calling the setState() function the widget won't be re-rendered causing the text to remain as it is.","This is all you need to understand the code in the counter app.","Note: A stateless widget can use stateful widgets and vice-versa in their build functions."]},{"l":"The Counter App","p":["To understand the code (in the file lib/main.dart) better, removing the comments is recommended.","Like most programming langauges, dart has a main() function which acts as the entry point to the code so let's start with that.","The main function calls a function runApp() which as the name suggests starts the app from the class named MyApp. This MyApp class is a stateless widget which has a pretty straight forward syntax.","As mentioned earlier every widget has a build function which determines the UI. Let's look at the build function of this class.","It returns something called a MaterialApp which let's you use the material design which is a set of icons, styles etc. widely used on the web and mobile. It also provides a huge library of Icons which we will look at later.","This MaterialApp has some parameters like title which defines the name of your app. A theme parameter which takes in the ThemeData widget which has a primarySwatch parameter which accepts a Color. You can mess around the with the color and look at the changes. This color is the default set of colours which your app uses unless you mention the color specifically for widgets. The last parameter is called home which is the main part of MaterialApp that is rendered. This takes in a class called MyHomePage.","The MyHomePage widget is a stateful widget and stateful widgets have a whacky syntax which requires you to split it into two parts which in this case is the MyHomePage and _MyHomePageState. In statefulWidgets we are mainly concerned with the second class i.e _MyHomePageState.","The build method of the _MyHomePageState returns a Scaffold which is a material widget which provides a set of default styles. This widget has an appBar parameter which takes in the AppBar widget and provides the title of the appbar.","You can notice that the syntax used is widget.title, this is because the variable title is in another class MyHomePage and to access the variables from this class you need to use widget.variableName.","The next parameter in Scaffold is the body parameter which is self-explanatory as to what it is. This uses the very basic layout widgets like Center and Column which we will look at in the next module along with a few more widgets used for layout. The Column widget has two Text widget, one of them being a const implying that it does not change once rendered and another one displaying the value of the _counter variable which is the state of this widget.","The final parameter of the Scaffold widget is floatingActionButton which is the button on the bottom right. This takes in a FloatingActionButton widget. The onPressed parameter on it is takes in the function that is called when a user presses the button which in this case is called _incrementCounter. This function calls in the setState() function and inside it, increments the counter. This re-renders the widget causing it to show the updated counter value. You can try and remove the setState() to see what happens.","The child parameter on the FloatingActionButton defines the Icon that is displayed on the button. The Icons class is a part of the material design icons.","That's it! You now know the basics of Flutter.","Didn't get parts of the code or the entirety of it? Maybe this will help: https://www.youtube.com/watch?v=-QRQIKtPTlI from timestamp 08:30 min to the end. Understood everything? Watch it anyway. Watch here Still didn't understand something? Feel free to ask in #discussion channel(preferred) using @FlutterInstructor or dm any of the FlutterInstructors."]},{"l":"Mini Assignment","p":["Modify the code in main.dart to toggle the visibility of any text widget using the Visibility widget and the floatingActionButton.","A slightly more advanced task would be to change the icon on the floating action button based on the visibility of the text. Take a look at Icons.visibility and Icons.visibility_off icons.","Hint: Ternary operator.","You do not need to submit this assignment however you can do so by dm-ing any of the Flutter Instructors your GitHub project link if you want to.","We will be posting the next module in a couple of days so keep a look out for that. We will also be annoucing your Week 1's assignment in the next module."]}],[{"l":"Widgets in Flutter","p":["Flutter widgets are built using a modern framework that takes inspiration from React. The central idea is that you build your UI out of widgets. Widgets describe what their view should look like given their current configuration and state. When a widget’s state changes, the widget rebuilds its description, which the framework diffs against the previous description in order to determine the minimal changes needed in the underlying render tree to transition from one state to the next.","Watch these videos below for more information:","Some Dart if you prefer videos Read more on the official doc Watch the \"Widgets\" chapter here: Widgets and constructors","More on widgets"]},{"l":"Basic Widgets","p":["This is from the official widgets documentation:"]},{"l":"Text","p":["The Text widget lets you create a run of styled text within your application."]},{"i":"row-column","l":"Row, Column","p":["These flex widgets let you create flexible layouts in both the horizontal (Row) and vertical (Column) directions. The design of these objects is based on the web’s flexbox layout model."]},{"l":"Stack","p":["Instead of being linearly oriented (either horizontally or vertically), a Stack widget lets you place widgets on top of each other in paint order. You can then use the Positioned widget on children of a Stack to position them relative to the top, right, bottom, or left edge of the stack. Stacks are based on the web’s absolute positioning layout model."]},{"l":"Container","p":["The Container widget lets you create a rectangular visual element. A container can be decorated with a BoxDecoration, such as a background, a border, or a shadow. A Container can also have margins, padding, and constraints applied to its size. In addition, a Container can be transformed in three dimensional space using a matrix."]},{"l":"Creating Layouts","p":["Layouts are created using the Row and Column widgets. Read about using them here.","We will see more of ListView and GridView later ⚡","Try making layouts using various widgets!"]},{"l":"Dart aside","p":["I hope you have already gone through the Dart codelabs. But just to be extra clear, here are some things you need to know about."]},{"l":"Function Parameters","p":["Functions can have required positional, optional positional or optional named parameters, as given here So when you are assigning Widgets as a child, you are using named parameters of the Widget's constructor."]},{"l":"Null safety","p":["You must know about null-safety since it is an important topic to understand. Null safety codelab"]},{"l":"The Challenge","p":["Ready for a challenge? Try to replicate this Settings page design.","Colors used are 0xFF15202D for the background and Colors.blueGrey.shade700 for the cards.","If you are not sure what these color values mean, refer to these links: About color codes Color in Dart","Use the Icon widget for the arrow icon. Notice that it has to be on the far right."]},{"l":"Solution"}],[{"l":"Constraints and State","p":["I trust you know the basic Widgets well.","Go through these documents to understand constraints in Flutter:","Constraints","Box Constraints"]},{"l":"State","p":["We have already come across state in the counter app, where the state was defined by a simple _counter variable.","setState We use the setState function in a Stateful widget to update the state and rebuild the widget tree. A stateful widget preserves its state and uses it to redraw itself in the future (if the state changes).","Read about using Stateful and Stateless widgets in this excellent document. Here","So in Flutter, a stateful widget can hold the state and pass it down so that its children can access it. For example, the home screen in a todo app can store the tasks list as a state and allow other Widgets on the screen to access this list.","Here we see that the state needed by TodaysTasks and UpcomingTasks widgets is \"lifted up\" to the parent widget and passed down.","What if we want to change the state in the parent widget from a child?","A trivial solution is to make the state variable(s) global such that all widgets have access to it. But global variables like these make code complicated very quickly and unmanageable.","Instead we declare a function in the parent widget and pass this function as a \"callback\" to the child widgets. Let's see this in the above example. Suppose we want to be able to delete a task from the tasks list.","Declare the function which deletes the task.","Pass this function as a parameter to the child widgets.","Note that we introduced named parameters to make our lives easier.","Call the function from the child widget.","This is your first very simple state management which can be used for short widget trees.","Read the more detailed explanation here.","We will look at proper state management in Week 3. Do not stress till then, we have lots to do first!"]},{"l":"Dart aside"},{"l":"Functions","p":["Dart has first-class functions, which can be treated as any other variable: passed as an argument or returned by functions. This is why we can pass around callbacks in \"lifting state up\" mechanism.","First class functions"]},{"l":"Style","p":["An important part of good code is good style that is consistent across programs written in a language. Consistent naming, ordering, and formatting helps code that is the same look the same.","The essential styles to keep in mind are these:"]},{"l":"Naming conventions","p":["Use UpperCamelCase for types (classes, enums, extensions, type parameters) and lowerCamelCase for other variables."]},{"l":"Trailing commas","p":["Add trailing commas after parameter lists to help the formatter format it pleasantly.","Notice the ))) at the end. Looks like a very sharp corner in the code.","Ah, now it is much better to follow each widget.","Read about styling in this effective dart document."]}],[{"l":"Assignment","p":["Week 1... is over! Great work on learning the basics of Flutter and Dart. This assignment is going to be the proof of your learning, let's go!"]},{"l":"Dart","p":["Generics are an important part of Flutter and it is essential that you are comfortable with them. Go through this article on generics to know more.","Don't worry about Future s or Stream s yet, we will learn and use them in Week 4."]},{"l":"The Problem","p":["This is the assignment problem, just to be clear.","Imagine you are working as an intern in a restaurant and you are tasked with managing stacks of plates. Since plates are to be handled with great diligence, you have built a robot who handles the plates with even greater care.","You now have to just write the software to control the robot."]},{"l":"Plates Handler","p":["Create a generic class (stack) named PlatesHandlerT with the following methods:","Pushes an element (plate) onto the stack.","Removes the top element from the stack. Throws an error if the stack is empty.","Throw Exception(Stack empty)) if stack is empty.","Get the top of the stack. Throws an error if stack is empty.","A getter for the length (size) of the stack.","A getter for whether the stack is empty.","Awesome! You have implemented the plate stack handler for the robot.","But now the chef wants a pancake stack handler too! Also the cleaners want a chair stack handler!","Well, what do you do now? There is no time to implement stacks from scratch again. Let's use the previous stack handler!"]},{"l":"Stack extendible","p":["Amazing, the robots are working great! You think your job is done and are going to celebrate but- the Chef wants something more!","Class: Pancake","Constructor, with weight and hasTopping arguments.","He wants an extra functionality to inspect the pancakes to see whether they meets his standards and to remove them from the stack if necessary.","Note that the pancakes above to will \"fall\" down.","Now, create the PancakeHandler class that extends Stack that you defined earlier. (Note that this is not a generic class, it will handle only Pancake s)","Remove all pancakes which return false from check. Returns number of pancakes removed.","Removes n pancakes and returns the last removed pancake. Default n is 1 if not provided.","Removes pancakes from indices from to to, both inclusive. Returns the bottommost pancake (at index from).","Rename the PlatesHandlerT to StackT. Since the chef wants to use this for pancakes, create a Pancake class with the following properties:","Represents the weight of the pancake.","Serial number of this pancake.","That is easy for the bright programmer you are! Create an extension on PancakeHandler to add this function.","Throws an error if the pancake under, or the top has syrup.","We also should be able to remove a set of pancakes at once from the middle of the stack. The catch is that the robot cannot handle the syrup. If the pancake under the from or the pancake at to has the topping, throw an error.","We want to be able to remove more than one pancake from the top at once, so you override the pop method to take an optional parameter for the number of pancakes to be removed.","Whether this pancake has a syrup topping."]},{"l":"Starter code","p":["Use this starter code and implement the classes and functions."]},{"l":"Flutter","p":["Uploading soon"]},{"l":"Submission guidelines","p":["Will be updated along with the Flutter assignment."]}]]