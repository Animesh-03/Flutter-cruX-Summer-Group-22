[[{"l":"Flutter cruX Summer Group 22","p":["Welcome to the Flutter Summer Group by cruX!","I am Animesh; Akshat and I will be your Flutter Mentors for the duration of the summer group.","Throughout this summer group you will be building a fully functional news app using newsapi, an OTP based authentication using firebase and a bookmark system using firestore.","I will be posting material which consist of tutorials and videos on the web by well known Youtubers for flutter dev and some hand-typed explanation from me on specific topics every week.","I hope you will learn something new and useful this summer and have a good addition to your projects on GitHub."]}],[{"l":"Installation And Introduction"},{"i":"what-is-flutter","l":"What is Flutter?","p":["Flutter is a multiplatform framework from Google used for building apps for web, mobile and desktop.","What do I mean by multiplatform? It means one can build apps for a device regardless of the platform it is running on like Android, iOS, Windows, Linux etc.","You might be aware of the shortage of apps for iOS for campus related task. This is because all those apps were built using native frameworks.","Native apps are those which are built for a specific platform and this means a developer needs to write code separately for each of those platforms though they are meant to serve the same purpose. This is very disappointing for developers that code apps that require multiple platforms.","Flutter however solves this issue as it only requires a developer to code once yet it can build to many different platforms like Android, iOS and Windows. This also ensures uniformity across the various platforms the app is deployed to.","Another advantage of Flutter over the standard frameworks which use HTML and CSS is that Flutter only uses \"Dart\" for everything it does. Dart is very similar to other languages like Java and shares most of the syntax you use in C/C++ with some additional functions.","You can watch these for a bit more info on Flutter and Dart:","Flutter in 100 seconds","Dart in 100 seconds"]},{"l":"Installation","p":["To get started with Flutter head on to https://docs.flutter.dev/get-started/install and follow the steps for your OS.","Make sure to follow every step sequentially and pay attention to the warnings to avoid errors.","Skip the \"Set up Android Emulator\" part for now as we will look at it later. However, follow the next steps in the web page.","Run flutter doctor in a command prompt or a shell after installation to ensure that flutter is working as intended.","We will be using VSCode throughout the summer group instead of Android Studio as VSCode is a million times faster and also will work on relatively potato PCs. However, this does not mean that installation of Android Studio is optional as Flutter needs it to be installed in your system.","To start using flutter in VSCode install the following extensions:","Flutter Extension","Awesome Flutter Snippets","Awesome flutter snippets provide certain snippets which makes life easier. We will be mainly using it for building stateless and stateful Widgets in the course so search the shortcuts for them in its documentation."]},{"l":"Dart","p":["There's just one more step before we actually get to building your first flutter project which is to understand the Dart language. You don't necessarily need to know every minute detail of dart or any new language for that matter to get started. You only need enough to roughly understand the objective of code that you see.","A good starting point for learning dart: https://codelabs.developers.google.com/codelabs/from-java-to-dart/","You can however complete additional codelabs if you want to, however it is not really necessary. https://dart.dev/codelabs"]},{"l":"Building A Flutter App","p":["The exciting part is finally here! Let's build our first app.","Open up a terminal in VSCode and run the following command: flutter create newsapp You can change the name of the app to anything else you like but make sure to not have any capital letters in the name.","As you can tell, the above command will create the necessary files for a flutter project. And yes, it does take a while to run the command.","This command will already create a basic app created for you all packed into a single dart file in lib/main.dart .","You can run the app by either using an emulator or plugging in your phone to your PC using your USB charging cable. Note that using an emulator will consume a significant amount of PC resources and is only recommended for systems with 16GB RAM. The Potato PCs can run their app using the USB cable.","To use emulator: https://docs.flutter.dev/get-started/install/windows#set-up-the-android-emulator","To run on physical device: https://medium.com/@ferilukmansyah/easy-way-to-setup-your-android-device-to-run-flutter-project-28bddf0fa7f1"]},{"l":"Next Steps","p":["We will be starting the Flutter track with Week 1 in July. In the meanwhile, enthusiastic folks can try and decipher the code in lib/main.dart of the project you just created. Do not get discouraged even if you understood absolutely nothing! Learning a new framework is a daunting task by itself and pair it up with a new language and congratulations, you just entered hell for a week or two (Yes, it doesn't take too long to get comfortable with Flutter). I will begin Week 1 by explaining the code in main.dart before anything else. Stay Tuned!"]}],[{"l":"Week 1","p":["In this week we will learn about Layout widgets and constraints."]},{"l":"Assignment","p":["The assignment will be a layout replication challenge."]}],[{"l":"Week1","p":["Welcome to Week 1 of the Flutter Summer Group by cruX! Before we jump into the code of the example counter app created by the flutter create command, let's look at what state is and the difference between stateless and stateful widgets."]},{"l":"State","p":["In generic terms, state of an app or more specifically of a widget in flutter determines what is to be rendered on to the screen. In other words, the UI is a function of state.","UI as a Function of State","To understand state better, let's look at stateless and stateful widgets."]},{"l":"Stateless and Stateful Widgets"},{"l":"Widgets","p":["A widget is a dart class which contains the info on how and what to render onto the screen.","This might be a good time to review or learn Object-Oriented Programming if you don't know already. You can look at the Python track which will introduce OOPS concept.","Everything in flutter is based on widgets. A widget performs a specific task that is described by the build method in the widget.","A widget is similar to a react component and the build method is similar to the render() function(for a class component) or a return() statement (for a functional component) for those familiar with ReactJS.","Every widget is further divided into stateless and stateful widgets and as the name suggests stateless widgets are something that do not concern themselves with state. In other words the UI is a constant function and cannot be changed once rendered.","A stateful widget on the other hand is something that can change given the state of the widget changes. The \"state\" in a stateful widget is simply a set of variables i.e, they can be an int, a string, a bool etc.","For example let's consider a button that can toggle a variable called bool isVisible which in turn toggles something like a text on the screen. When a user presses the button, the app needs to change its state which in this case is isVisible. In flutter, to change the state you need to call the setState() function which notifies that the state has changed and hence the widget needs to rendered again. If you however change the value of the variable without calling the setState() function the widget won't be re-rendered causing the text to remain as it is.","This is all you need to understand the code in the counter app.","Note: A stateless widget can use stateful widgets and vice-versa in their build functions."]},{"l":"The Counter App","p":["To understand the code (in the file lib/main.dart) better, removing the comments is recommended.","Like most programming langauges, dart has a main() function which acts as the entry point to the code so let's start with that.","The main function calls a function runApp() which as the name suggests starts the app from the class named MyApp. This MyApp class is a stateless widget which has a pretty straight forward syntax.","As mentioned earlier every widget has a build function which determines the UI. Let's look at the build function of this class.","It returns something called a MaterialApp which let's you use the material design which is a set of icons, styles etc. widely used on the web and mobile. It also provides a huge library of Icons which we will look at later.","This MaterialApp has some parameters like title which defines the name of your app. A theme parameter which takes in the ThemeData widget which has a primarySwatch parameter which accepts a Color. You can mess around the with the color and look at the changes. This color is the default set of colours which your app uses unless you mention the color specifically for widgets. The last parameter is called home which is the main part of MaterialApp that is rendered. This takes in a class called MyHomePage.","The MyHomePage widget is a stateful widget and stateful widgets have a whacky syntax which requires you to split it into two parts which in this case is the MyHomePage and _MyHomePageState. In statefulWidgets we are mainly concerned with the second class i.e _MyHomePageState.","The build method of the _MyHomePageState returns a Scaffold which is a material widget which provides a set of default styles. This widget has an appBar parameter which takes in the AppBar widget and provides the title of the appbar.","You can notice that the syntax used is widget.title, this is because the variable title is in another class MyHomePage and to access the variables from this class you need to use widget.variableName.","The next parameter in Scaffold is the body parameter which is self-explanatory as to what it is. This uses the very basic layout widgets like Center and Column which we will look at in the next module along with a few more widgets used for layout. The Column widget has two Text widget, one of them being a const implying that it does not change once rendered and another one displaying the value of the _counter variable which is the state of this widget.","The final parameter of the Scaffold widget is floatingActionButton which is the button on the bottom right. This takes in a FloatingActionButton widget. The onPressed parameter on it is takes in the function that is called when a user presses the button which in this case is called _incrementCounter. This function calls in the setState() function and inside it, increments the counter. This re-renders the widget causing it to show the updated counter value. You can try and remove the setState() to see what happens.","The child parameter on the FloatingActionButton defines the Icon that is displayed on the button. The Icons class is a part of the material design icons.","That's it! You now know the basics of Flutter.","Didn't get parts of the code or the entirety of it? Maybe this will help: https://www.youtube.com/watch?v=-QRQIKtPTlI from timestamp 08:30 min to the end. Understood everything? Watch it anyway. Watch here Still didn't understand something? Feel free to ask in #discussion channel(preferred) using @FlutterInstructor or dm any of the FlutterInstructors."]},{"l":"Mini Assignment","p":["Modify the code in main.dart to toggle the visibility of any text widget using the Visibility widget and the floatingActionButton.","A slightly more advanced task would be to change the icon on the floating action button based on the visibility of the text. Take a look at Icons.visibility and Icons.visibility_off icons.","Hint: Ternary operator.","You do not need to submit this assignment however you can do so by dm-ing any of the Flutter Instructors your GitHub project link if you want to.","We will be posting the next module in a couple of days so keep a look out for that. We will also be annoucing your Week 1's assignment in the next module."]}],[{"l":"Widgets in Flutter","p":["Flutter widgets are built using a modern framework that takes inspiration from React. The central idea is that you build your UI out of widgets. Widgets describe what their view should look like given their current configuration and state. When a widget’s state changes, the widget rebuilds its description, which the framework diffs against the previous description in order to determine the minimal changes needed in the underlying render tree to transition from one state to the next.","Watch these videos below for more information:","Some Dart if you prefer videos Read more on the official doc Watch the \"Widgets\" chapter here: Widgets and constructors","More on widgets"]},{"l":"Basic Widgets","p":["This is from the official widgets documentation:"]},{"l":"Text","p":["The Text widget lets you create a run of styled text within your application."]},{"i":"row-column","l":"Row, Column","p":["These flex widgets let you create flexible layouts in both the horizontal (Row) and vertical (Column) directions. The design of these objects is based on the web’s flexbox layout model."]},{"l":"Stack","p":["Instead of being linearly oriented (either horizontally or vertically), a Stack widget lets you place widgets on top of each other in paint order. You can then use the Positioned widget on children of a Stack to position them relative to the top, right, bottom, or left edge of the stack. Stacks are based on the web’s absolute positioning layout model."]},{"l":"Container","p":["The Container widget lets you create a rectangular visual element. A container can be decorated with a BoxDecoration, such as a background, a border, or a shadow. A Container can also have margins, padding, and constraints applied to its size. In addition, a Container can be transformed in three dimensional space using a matrix."]},{"l":"Creating Layouts","p":["Layouts are created using the Row and Column widgets. Read about using them here.","We will see more of ListView and GridView later ⚡","Try making layouts using various widgets!"]},{"l":"Dart aside","p":["I hope you have already gone through the Dart codelabs. But just to be extra clear, here are some things you need to know about."]},{"l":"Function Parameters","p":["Functions can have required positional, optional positional or optional named parameters, as given here So when you are assigning Widgets as a child, you are using named parameters of the Widget's constructor."]},{"l":"Null safety","p":["You must know about null-safety since it is an important topic to understand. Null safety codelab"]},{"l":"The Challenge","p":["Ready for a challenge? Try to replicate this Settings page design.","Colors used are 0xFF15202D for the background and Colors.blueGrey.shade700 for the cards.","If you are not sure what these color values mean, refer to these links: About color codes Color in Dart","Use the Icon widget for the arrow icon. Notice that it has to be on the far right."]},{"l":"Solution"}],[{"l":"Constraints and State","p":["I trust you know the basic Widgets well.","Go through these documents to understand constraints in Flutter:","Constraints","Box Constraints"]},{"l":"State","p":["We have already come across state in the counter app, where the state was defined by a simple _counter variable.","setState We use the setState function in a Stateful widget to update the state and rebuild the widget tree. A stateful widget preserves its state and uses it to redraw itself in the future (if the state changes).","Read about using Stateful and Stateless widgets in this excellent document. Here","So in Flutter, a stateful widget can hold the state and pass it down so that its children can access it. For example, the home screen in a todo app can store the tasks list as a state and allow other Widgets on the screen to access this list.","Here we see that the state needed by TodaysTasks and UpcomingTasks widgets is \"lifted up\" to the parent widget and passed down.","What if we want to change the state in the parent widget from a child?","A trivial solution is to make the state variable(s) global such that all widgets have access to it. But global variables like these make code complicated very quickly and unmanageable.","Instead we declare a function in the parent widget and pass this function as a \"callback\" to the child widgets. Let's see this in the above example. Suppose we want to be able to delete a task from the tasks list.","Declare the function which deletes the task.","Pass this function as a parameter to the child widgets.","Note that we introduced named parameters to make our lives easier.","Call the function from the child widget.","This is your first very simple state management which can be used for short widget trees.","Read the more detailed explanation here.","We will look at proper state management in Week 3. Do not stress till then, we have lots to do first!"]},{"l":"Dart aside"},{"l":"Functions","p":["Dart has first-class functions, which can be treated as any other variable: passed as an argument or returned by functions. This is why we can pass around callbacks in \"lifting state up\" mechanism.","First class functions"]},{"l":"Style","p":["An important part of good code is good style that is consistent across programs written in a language. Consistent naming, ordering, and formatting helps code that is the same look the same.","The essential styles to keep in mind are these:"]},{"l":"Naming conventions","p":["Use UpperCamelCase for types (classes, enums, extensions, type parameters) and lowerCamelCase for other variables."]},{"l":"Trailing commas","p":["Add trailing commas after parameter lists to help the formatter format it pleasantly.","Notice the ))) at the end. Looks like a very sharp corner in the code.","Ah, now it is much better to follow each widget.","Read about styling in this effective dart document."]}],[{"l":"Assignment","p":["Week 1... is over! Great work on learning the basics of Flutter and Dart. This assignment is going to be the proof of your learning, let's go!"]},{"i":"dart-part-1","l":"Dart (Part 1)","p":["Generics are an important part of Flutter and it is essential that you are comfortable with them. Go through this article on generics to know more.","Don't worry about Future s or Stream s yet, we will learn and use them in Week 4."]},{"l":"The Problem","p":["This is the assignment problem, just to be clear.","Imagine you are working as an intern in a restaurant and you are tasked with managing stacks of plates. Since plates are to be handled with great diligence, you have built a robot who handles the plates with even greater care.","You now have to just write the software to control the robot."]},{"l":"Plates Handler","p":["Create a generic class (stack) named PlatesHandlerT with the following methods:","Pushes an element (plate) onto the stack.","Removes the top element from the stack. Throws an error if the stack is empty.","Throw Exception(Stack empty)) if stack is empty.","Get the top of the stack. Throws an error if stack is empty.","A getter for the length (size) of the stack.","A getter for whether the stack is empty.","Awesome! You have implemented the plate stack handler for the robot.","But now the chef wants a pancake stack handler too! Also the cleaners want a chair stack handler!","Well, what do you do now? There is no time to implement stacks from scratch again. Let's use the previous stack handler!"]},{"l":"Stack extendible","p":["Amazing, the robots are working great! You think your job is done and are going to celebrate but- the Chef wants something more!","Class: Pancake","Constructor, with weight and hasTopping arguments.","He wants an extra functionality to inspect the pancakes to see whether they meets his standards and to remove them from the stack if necessary.","Note that the pancakes above to will \"fall\" down.","Now, create the PancakeHandler class that extends Stack that you defined earlier. (Note that this is not a generic class, it will handle only Pancake s)","Remove all pancakes which return false from check. Returns number of pancakes removed.","Removes n pancakes and returns the last removed pancake. Default n is 1 if not provided.","Removes pancakes from indices from to to, both inclusive. Returns the bottommost pancake (at index from).","Rename the PlatesHandlerT to StackT. Since the chef wants to use this for pancakes, create a Pancake class with the following properties:","Represents the weight of the pancake.","Serial number of this pancake.","That is easy for the bright programmer you are! Create an extension on PancakeHandler to add this function.","Throws an error if the pancake under, or the top has syrup.","We also should be able to remove a set of pancakes at once from the middle of the stack. The catch is that the robot cannot handle the syrup. If the pancake under the from or the pancake at to has the topping, throw an error.","We want to be able to remove more than one pancake from the top at once, so you override the pop method to take an optional parameter for the number of pancakes to be removed.","Whether this pancake has a syrup topping."]},{"l":"Starter code","p":["Use this starter code and implement the classes and functions. More information in the submission guidelines"]},{"i":"flutter-part-2","l":"Flutter (Part 2)","p":["Recreate this design in Flutter. The best submission will be marked as the \"official\" solution! Download design"]},{"l":"Submission guidelines"},{"i":"dart-part-1-1","l":"Dart (Part 1)","p":["You have to submit a dart project with your code.","Fork this repository and clone it locally. Part 1","Use the starter code in the lib/assignment_1.dart and implement the class methods.","To test, run dart test in the the root directory, or navigate to the test/assignment_1_test.dart file and click the Run text button above void main() in VS Code.","Once finished, submit the link to your fork in the form given below."]},{"i":"flutter-part-2-1","l":"Flutter (Part 2)","p":["Create a git repository and push it to GitHub. Submit the link to this repository."]},{"l":"Google Form","p":["Submit this form embedded below.","Or click here to open it in a separate browser tab."]}],[{"l":"Week 2","p":["Congratulations on making it to Week 2! Hope you had fun with the assignment last week whose aim was to get you familiar with the OOPS concepts and a bit of DSA as well which is going to be very useful not only for flutter but your IT career as well.","This week you will go deeper into making beautiful and responsive apps by adding images using the Image widget as well as adding multiple screens to our app and of course to be able to view the multiple screens you will be learning about Navigation and the Navigator widget."]},{"l":"Assignment","p":["The assignment this week will be building an entire app with multiple screens. Further details will be revealed later."]}],[{"l":"Images","p":["If you noticed the flutter assignment last week was similar to displaying a splash screen with the logo of an app (A wonky logo nonetheless). But surely there would be a way to display logos other than creating a logo with with containers and other similar layout widgets right??","Absolutely YES!"]},{"l":"Network Image","p":["You can display an image which is hosted somewhere on the internet by simply providing the URL of the image to the Image.network widget. You can pass additional parameters to the widget like width and height to manage its appearance. You can look at more of the additional parameters here in its constructor."]},{"l":"Placeholder Widget","p":["What if you know that one day there will be an image in a certain place but you don't have the perfect image yet? This is where the Placeholder widget comes in to save the day.","This widget can also be used to build quick prototypes to your apps as it can act as a placeholder not only for images but various other components of your app like a paragraph, a heading, an app bar etc."]},{"l":"Assets","p":["What if you have an image that's on your project folder instead of somewhere on the web? This is where assets come in.","You need to \"declare\" your images before-hand to use them in your app. This declaration is to be done in your pubspec.yaml file which is in the root of your project folder.","Let's say you have an image named meme.png in a folder called static which is located in your root folder. To declare this image in your pubspec.yaml","To display this asset in your flutter app use the AssetImage widget:","This is just a gist of using assets. There are many more ways to use assets and more specifically declare your assets in pubspec.yaml","You can read more about adding assets here"]},{"l":"Adding Packages","p":["Like most of the frameworks available, flutter too has a bunch of packages available which can be added to your project using pub.","pub is the npm of flutter.","You can add a package by either using the command flutter pub add package_name or by adding the package in pubspec.yaml.","The above adds the firebase_core package with a version of 1.18.0 or above if available.","We will be using various packages throughout the sg. You can browse the available packages in pub.dev","We will be covering Navigation in flutter in the next module. In the meanwhile you can mess around with your new found knowledge on adding packages. You can look at this package which can be used to change the app icon which will be displayed on your device. There are more painful ways to change the icon too by messing around with android and ios folders in your project but this will be upto you."]}],[{"l":"Navigation","p":["Navigation here refers to travelling between the various pages, which in the context of navigation are called Routes in your app."]},{"l":"Push and Pop","p":["Sound familiar?","In the assignment last week, you were asked to create a stack with the push and pop functions.","The navigation system in flutter is very similar to a stack. Here the routes are stacked upon each other. To demonstrate this, let's consider 'WhatsApp' a very familiar app. In case you never heard of it you belong to the Amish community.","WhatsApp has a home screen displaying the various groups and contacts which we call the Home page. On tapping one of the contacts, you are sent to the Chat page but what happens to the Home page? It lies underneath the Chat page still in memory, similar to a stack. Once you press the back button you go back to the Home page meaning that the Chat page has been pop()-ed.","What happens if the Navigation doesn't function like a stack but instead there's always a single page in memory? To go back to a previous page, the app will need to re-render the entire page going through all the widgets in the tree. This will consume a significant time which will make your app feel less responsive.","Navigation is a pretty broad topic to cover. Fortunately, flutter docs has a pretty good tutorial-esque documentation.","Navigation Cookbook","Here's a little more detailed but also more complicated documentation of the Navigator widget: Navigator. You might not understand everything in the docs but I recommend to give it a read anyways. Also look at the static methods of the Navigator widget just to get an idea of what can and cannot be done."]},{"l":"Page Transitions","p":["MaterialPageRoute provides an in-built page transition which looks better than the ordinary transition. You can create custom page transition animations too if required but we leave that part to you to explore.","You can look at page_transition package which has a few page transitions which are easy to use. To learn how to use it take a look at this. If you want to do something that is not methioned in the video look at the package's documentation in pub.dev."]},{"l":"Forms","p":["Often, users will need to be able enter stuff into the app like username, password, their preferences etc. Users will need a text box to be able to type into. This is where forms come in place.","Forms are a relatively easy and small topic, Take a loot at this cookbook to use forms in your app."]},{"l":"Mini Assignment","p":["Create 2 routes. In the first route there will be a text widget and a floatingActionButton. On tapping the button, user will be navigated to the 2nd route where the user can type something in an input field and another button to go back which will take you back to the first route and and the text widget will display the text entered by the user.","This mini-assignment is related to the assignment of this week so we recommend you do it.","We will be releasing your assignment sometime in the next two days. This time however you will be building a complete app instead of something abstract like last time."]}],[{"l":"Assignment","p":["This week you will be building a fully functional Todo App with the following specifications:","Have a Home screen which displays all the todo items using a ListView(More on this later).","Have floatingActionButton which navigates the user to an AddItem Screen.","The Add item Screen should have the following:","Item title input field","Item description input field","Submit button","Upon tapping the submit button a new item should be added to the Home screen (preferably to the top of the list)","Each item should be \"Slidable\"(More on this later) which reveals two actions:","Delete Item","Complete Item","If an item is marked complete change its color to green or something suitable.","When an item is pressed navigate the user to another page which has an app bar with the title being the Item's title and the body of the page containing the Item's description.","Finally the list must be saved to the device using the shared_prefs(More on this later) package which allows the user to have persistent data."]},{"l":"ListView","p":["The ListView widget is an extremely useful and easy to use widget which helps you to handle a List of data. In our case we will have a ListTodoItem which will have the necessary information to render onto our screen like the title, description, completed , etc.","You can find the documentation of the widget here.","Make sure you use the ListView.builder() method to render the list onto the screen."]},{"l":"Slidable","p":["This is a very cool widget which makes your app feel more modern. Upon sliding this widget, it reveals a drawer with actions you specify.","Learn more about this widget here.","Here's a quick tutorial on how to use the Slidable widget."]},{"l":"Shared Preferences","p":["This widget allows the app store data locally which can then be retrieved when the app starts again. This allows the todo items to be retrieved even after the app is closed.","In simple terms you need to Serialize your TodoItem object to JSON which is then converted to a string and stored by the Shared Preferences Plugin.","Serialization can be a difficult thing to grasp so here's an example as to how you can use the Shared Preferences Plugin to serialize and deserialize a List of objects."]},{"l":"Basic Project Outline","p":["Since you might not be familiar with OOP concepts which is necessary to write clean and manageable code, here's a brief overview of what you should be doing:","The add item page should be pretty simple so we leave that to you."]},{"l":"Submission Guidelines","p":["This assignment is slightly complicated for beginners but we don't expect you to do everything without any bugs. You can submit whatever you have done. Feel free to contact us in case of any difficulties or clarifications.","The current deadline is 19th 11:59 PM. We might extend it if needed upon demand.","Form Link for submission: Assignment 2 Form"]}],[{"l":"Using APIs","p":["You might already know what APIs are and why they are useful, so we'll skip through that part and get to the interesting stuff right away.","For this module you will be using the JokeAPI which sends you bad jokes in its response which you can customise further using the request you send.","To get started Install the http package using pub add and if on android add the following line to your AndroidManifest.xml: uses-permission android:name=android.permission.INTERNET / which is located in android/app/src/main/."]},{"l":"Promises","p":["Since the http package uses internet to do \"stuff\" and doing \"stuff\" takes a certain amount of time depending on the API that you want to use but, how do you tell your app to wait for the \"stuff\" to complete? Here's where promises come into play.","A PromiseT is something that returns a T object (T is a generic here) after a while.","The http package returns Promisehttp.Response object which contains the data returned by your request and some additional stuff which we are not concerned about for now.","But you want your data which is inside the Promise. To do that you can use the await keyword:","It is also recommended to wrap the http part inside a try catch block to resolve any errors that might popup either because your code is wrong or the API that you are using is currently unavailable.","Note: If you are using await inside a function then you must mark the function to \"asynchronous\" by using the async keyword t"]},{"l":"Error Codes","p":["It is extremely helpful to remember some common error codes:","200 = OK, Your request was successful and you got your response back","400 = Bad Request, The request you sent was not valid and you did not get a \"useful\" response back.","401 = Unauthorized, The API to which you sent the request does not recognize you. This usually happens when the API requires an API key which you usually get from their website.","403 = Forbidden, This happens when you provide an API key but your \"tier\" of API key does not support the feature you are trying to use.","404 = Not Found, The most common error. This happens when you try to reach an endpoint of an API that does not exist which commonly occurs due to spelling mistakes in the URL.","405 = Method Not Allowed, This happens when the URL you entered is correct but the method you are using is not valid for the endpoint. The JokeAPI only allows \"GET\" methods on its endpoint and will return a 405 if try sending a \"POST\" request.","500 = Internal Server Error, This usually means that the API you are trying to use is currently unavailble and hence you get an error."]},{"l":"Additional Resources","p":["Official Tutorial from Flutter","http Package Documentation"]},{"l":"Mini-Assignment","p":["The JokeAPI provides two kinds of jokes : A single paragraph type and a Q/A type.","You need to create separate Widgets for both of the types of jokes and then display them using the appropriate widget on a screen.","You can use the fromJSON() method from your previous assignment to convert the JSON objects you receive in the response into a class to use the the Jokes in a better way."]}],[{"l":"State Management","p":["The UI's task is to represent state in a presentable format. By managing state effectively, we can update the UI and data in an elegant manner.","Suppose we are displaying a list of courses available this semester. When the app is fetching data (as seen in the last module), we should show a loading spinner to let the user know. When the list is loaded, we remove the loading spinner and display the actual list. Thus we move from loading to loaded state, and handling this manually without a pattern will be difficult to maintain in the long run. We have already seen a way to handle this, using \"State lifting\"."]},{"l":"State revisited","p":["The state that we manage can be dvidied into two types:"]},{"l":"Ephemeral State","p":["Ephemeral state is the state you can store in a single widget. No other widget needs to access this widget's data. Examples include a TabBarView, where the tab selected is the ephemeral data.","No state management is required here, just a Stateful Widget and setState does the job."]},{"l":"App state","p":["State that we want to share in many parts of the app, and keep between user sessions is called the application state or shared state. Example can be the theme mode of an app (dark or light), notifications, user settings etc. Here is where we need one of the state management solutions, of which we shall explore a few in this module. More about state","State management options Let's move on to one of the many patterns for state management."]},{"l":"Inherited Widget","p":["The InheritedWidget is a built in class that allows its child widgets to access its data. It is immutable, hence all fields are final, but any other widget under this can access those fields.","For example, consider this widget tree:","There are two inherited widgets (red and blue). Widgets C and J use the data from the red one while H uses data from the blue one. There is no need to pass down the variables through constructors.","Read and watch these links for details about the implementations: Widgets 101","Inherited widget Using it"]},{"l":"Provider package","p":["The scoped_model was built on top of the InheritedWidget to separate UI and data, but Google recommended using the Provider package instead from 2018.","Provider is a wrapper around the InheritedWidget and simplifies the process."]},{"l":"Classes used","p":["These are the common classes used in Provider: ChangeNotifierProvider, Consumer, FutureProvider, StreamProvider, and MultiProvider. ChangeNotifier is an essential class built in the Flutter SDK."]},{"l":"Using Provider","p":["Let us now use the Provider package to build the counter app that Flutter comes with.","Since the counter is the data, create a class called CounterModel that stores this state.","All logic is now in this ChangeNotifier class. notifyListeners is used instead of setState() to update the state.","We now link this to the UI:","Using the ChangeNotifierProvider widget, create an instance of the class so the subtree can use it:","The ChangeNotifierProvider now exposes this instance of CounterModel to all widgets in SomePage.","Get the value from MyApp widget by using Provider.ofT(context) method.","Now to increment the counter, use counter.increment.","When the increment method is called, it calls notifyListeners. Since SomePage is a listener(it is a child of ChangeNotifierProvider), it is listening to changes and rebuilds.","Instead of Provider.ofT(context), we can use context.readT() or context.watchT().","More info"]},{"l":"Consumer","p":["The Provider.ofT(context) method can only be used in the subtree of the ChangeNotifierProvider. An exception occurs otherwise, because there's no matching Provider above.","Provider, as opposed to ChangeNotifierProvider only supports reading of the provided value. The widgets are not rebuilt. This won't work, as both the Provider and Provider.of are at the same level of Provider. There are two ways to solve this problem:","Introduce a BuildContext one level below the Provider. This can be done by creating a dummy widget and extracting the child to this widget. By wrapping the code that uses Provider.of in another widget, we can also use the const constructor.","Use the ConsumerT class that automatically obtains the value.","The associated widget is rebuilt everytime the Provided instance calls NotifyListeners. If you are using using Provider to just pass on a cache object down the tree, use Provider.ofT(context, listen: false) to not trigger a rebuild of the widget.","This is also used when the value is need outside the widget tree, where there is nothing to rebuild.","Or, we can use context.read as well.","Read more about using these methods and classes and also the good practices on the official documentation. On pub.dev","On Flutter","There are many more state manangement libraries like Redux, BLoC, RiverPod, each having their advantages. In this summer group we will stick to Provider, and I think you are armed enough to explore the rest :)"]}],[{"l":"Assignment","p":["Let's start creating the final chat application. We will build an app that will have a common room where users can send messages. All parts will be implemented over these two weeks.","The Final Assignment will have all parts collected in one page."]},{"l":"Part 1"},{"l":"Design","p":["Make a page that displays the room. This will show the messages and an input field at the bottom along with a send button to send the message typed.","This is similar to the conversation window you get when you click on a group name in WhatsApp."]},{"l":"Functionality","p":["Since we don't have a backend yet, create a local dummy messenger. When you type a message and hit Send, you can see the message up in the window as a bubble.","The message bubble should contain the message itself, sender ( You, in this case) and the sent time.","You can add hardcoded dummy messages as well, just to test your UI.","Make your messages right aligned, and others' left aligned.","Give every sender a random colour for every message bubble. Normally, colours are fixed for every user, but we shall do that when we add logic to receive messages.","Implement dark mode, with a button in the AppBar to switch between modes. Look into theming for Flutter apps."]}],[{"l":"Firebase","p":["It's finally time to use the amazing features of firebase in your app!","To get started head on to Firebase Console and create a project. Give your project any name you want and google analytics part doesn't really matter so keep it if you want to.","After your project is created you will be taken to your project's dashboard. Click on the Flutter Icon there and follow the steps like installing the CLI.","Note: The CLI tool might not work on some terminals like git bash so use the windows cmd prompt for the steps mentioned there.","You likely want to setup your project for just android and ios so select just those.","You are now done connecting your firebase project to your flutter app.","Call the following in the main() function before call the runApp function. Don't forget to mark the main function to be async."]},{"l":"Authentication","p":["You now need a way to let users signup and login to use your chat application.","To do this firebase provides a ton of different ways to enable users to login. Go the authentication Tab from the navbar on the right: Build->Authentication-> Sign-In methods","For the sake of explanation here I will be choosing the E-mail/password authentication but you are free to choose whatever you want, though the documentation for each will be different."]},{"l":"Email Authentication","p":["Have a brief look at the documentation to understand how the email auth works: Docs","This type of authentication needs two screens: one for signup and the other for login. Make sure to have a way to navigate between the 2 screens like \"Register here\" button in the login screen and \"Login here\" button in the register screen.","As you can tell from the docs, you need two InputFields for the email and password and then pass it to a function that calls the respective firebase functions for signup and login.","Once a user successfully registers you can see that this gets reflected in the Users tab of Authentication. Each user is assigned a random Unique ID aka UID by firebase.","A cool thing that firebase does is that automatically stores the user that logged in last time in your local storage. This user can the be accessed with","The current user is null when there is no user that is signed in."]},{"l":"Authentication Wrapper","p":["Create a Widget called AuthWrapper which is the first widget that will be called after the MaterialApp.","This widget will check if there is a user that is logged in currently and pass him to the chat screen if yes, else pass him to the login screen.","You can check for the user by using another function that firebase provides called authStateChanges(). This function returns a stream which contains the data on the user.","You can use the StreamBuilder widget which takes in the stream and uses it to rebuild the widget if there is a change to the stream.","You can have some other static functions inside this widget that are concerned with authentication like a signOut() function which clears the currentUser."]},{"l":"Intro to Firestore","p":["You need some way to let the user pick his own username but the signIn function that firebase provides has no such option. Hence you need to map the UID that firebase generates to a username that a user can pick. So now you need to have 3 Input fields in the signup Screen.","After a user is created successfully (without any exceptions) you need to get the UID that is generated and map to his username with something like this using JSON","Now that you are done with mapping you need to store this somewhere on firebase.","Firestore is the database that firebase provides which is a collection-document based database. To learn more about how that works take a look at this: Firestore Data Modelling","We will proceed with how to use firestore in the next module."]}],[{"l":"Final Assignment","p":["This is the final chat application we will create using Provider and Firebase. There will be multiple parts that shall be updated in the coming week.","We will build an app that will have a common room where users can send messages.","Contents given here are the same as those in the assignment sections on Week 3 and 4"]},{"l":"Part 1"},{"l":"Design","p":["Make a page that displays the room. This will show the messages and an input field at the bottom along with a send button to send the message typed.","This is similar to the conversation window you get when you click on a group name in WhatsApp."]},{"l":"Functionality","p":["Since we don't have a backend yet, create a local dummy messenger. When you type a message and hit Send, you can see the message up in the window as a bubble.","The message bubble should contain the message itself, sender ( You, in this case) and the sent time.","You can add hardcoded dummy messages as well, just to test your UI.","Make your messages right aligned, and others' left aligned.","Give every sender a random colour for every message bubble. Normally, colours are fixed for every user, but we shall do that when we add logic to receive messages.","Implement dark mode, with a button in the AppBar to switch between modes. Look into theming for Flutter apps.cr","Create a firebase project and connect it with your flutter app.","Setup authentication of your choice on firebase console by enabling it.","Create 2 screens for each of register and login page with 2 input fields in login for email and password and 3 input fields in register page for email, password and username.","There must be a way to navigate to and fro from login and register screens.","Note: The above design is only for the E-mail/Password authentication. You can come up with a suitable design if you choose a different mode of authentication.","The Register screen must have a button which calls the register logic in firebase. Upon successful registration you need to call an additional function which takes in the username entered and stores it in firestore. Since firestore is not yet covered you can leave this function empty for now. Make sure to catch any errors and deal with them appropriately.","Make an AuthWrapper Widget as described in the Firebase Module in Week 4 and add a static function to signout.","Add a signout button in the chat screen which calls the static funcion in AuthWrapper when pressed.","The Login Screen must have a button that calls the login logic in firebase."]}]]